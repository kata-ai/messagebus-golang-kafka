// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     message_header.avsc
 */
package record

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"github.com/google/uuid"
	"io"
	"os"
	"time"
)

type MessageKeyOption func(k *MessageKey)

type MessageKey struct {
	ValueSubject string `json:"valueSubject"`

	MessageId string `json:"messageId"`

	CorrelationId string `json:"correlationId"`

	ConversationId string `json:"conversationId"`

	ReplyTopic string `json:"replyTopic"`

	OriginService string `json:"originService"`

	OriginHostname string `json:"originHostname"`

	MessageBusVersion string `json:"messageBusVersion"`

	Timestamp int64 `json:"timestamp"`
}

const MessageKeyAvroCRC64Fingerprint = "k\xe9\xb8G\xb5\x9a=v"

func NewMessageKey(originService string, options ...MessageKeyOption) (*MessageKey, error) {
	id := uuid.New().String()
	hostname, err := os.Hostname()
	if err != nil {
		return nil, err
	}
	key := &MessageKey{
		OriginService:     originService,
		MessageId:         id,
		CorrelationId:     id,
		OriginHostname:    hostname,
		MessageBusVersion: VERSION,
		Timestamp:         time.Now().Unix() * 1000,
		ConversationId:    id,
	}
	for _, opt := range options {
		opt(key)
	}
	return key, nil
}

func (r *MessageKey) SetValueSubject(valueSubject string) {
	r.ValueSubject = valueSubject
}

func DeserializeMessageKey(r io.Reader) (*MessageKey, error) {
	t := &MessageKey{}
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func WithReplyTopic(topic string) MessageKeyOption {
	return func(k *MessageKey) {
		k.ReplyTopic = topic
	}
}

func DeserializeMessageKeyFromSchema(r io.Reader, schema string) (*MessageKey, error) {
	t := &MessageKey{}

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeMessageKey(r *MessageKey, w io.Writer) error {
	var err error
	err = vm.WriteString(r.ValueSubject, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MessageId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CorrelationId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ConversationId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ReplyTopic, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OriginService, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OriginHostname, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MessageBusVersion, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Timestamp, w)
	if err != nil {
		return err
	}
	return err
}

func (r *MessageKey) Serialize(w io.Writer) error {
	return writeMessageKey(r, w)
}

func (r *MessageKey) Schema() string {
	return "{\"fields\":[{\"name\":\"valueSubject\",\"type\":\"string\"},{\"name\":\"messageId\",\"type\":\"string\"},{\"name\":\"correlationId\",\"type\":\"string\"},{\"name\":\"conversationId\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"replyTopic\",\"type\":\"string\"},{\"name\":\"originService\",\"type\":\"string\"},{\"name\":\"originHostname\",\"type\":\"string\"},{\"name\":\"messageBusVersion\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"}],\"name\":\"ai.kata.kafka.MessageKey\",\"type\":\"record\"}"
}

func (r *MessageKey) SchemaName() string {
	return "ai.kata.kafka.MessageKey"
}

func (_ *MessageKey) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *MessageKey) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *MessageKey) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *MessageKey) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *MessageKey) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *MessageKey) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *MessageKey) SetString(v string)   { panic("Unsupported operation") }
func (_ *MessageKey) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MessageKey) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.ValueSubject}
	case 1:
		return &types.String{Target: &r.MessageId}
	case 2:
		return &types.String{Target: &r.CorrelationId}
	case 3:
		return &types.String{Target: &r.ConversationId}
	case 4:
		return &types.String{Target: &r.ReplyTopic}
	case 5:
		return &types.String{Target: &r.OriginService}
	case 6:
		return &types.String{Target: &r.OriginHostname}
	case 7:
		return &types.String{Target: &r.MessageBusVersion}
	case 8:
		return &types.Long{Target: &r.Timestamp}
	}
	panic("Unknown field index")
}

func (r *MessageKey) SetDefault(i int) {
	switch i {
	case 4:
		r.ReplyTopic = ""
		return
	}
	panic("Unknown field index")
}

func (r *MessageKey) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *MessageKey) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *MessageKey) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *MessageKey) Finalize()                        {}

func (_ *MessageKey) AvroCRC64Fingerprint() []byte {
	return []byte(MessageKeyAvroCRC64Fingerprint)
}
