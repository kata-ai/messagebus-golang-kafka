// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     johny_schema.avsc
 */
package schemas

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type JohnySchema struct {
	Name string `json:"name"`

	Age int32 `json:"age"`
}

const JohnySchemaAvroCRC64Fingerprint = "ï´µv,\x95+-"

func NewJohnySchema() *JohnySchema {
	return &JohnySchema{}
}

func DeserializeJohnySchema(r io.Reader) (*JohnySchema, error) {
	t := NewJohnySchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeJohnySchemaFromSchema(r io.Reader, schema string) (*JohnySchema, error) {
	t := NewJohnySchema()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeJohnySchema(r *JohnySchema, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Age, w)
	if err != nil {
		return err
	}
	return err
}

func (r *JohnySchema) Serialize(w io.Writer) error {
	return writeJohnySchema(r, w)
}

func (r *JohnySchema) Schema() string {
	return "{\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"}],\"name\":\"kata.JohnySchema\",\"type\":\"record\"}"
}

func (r *JohnySchema) SchemaName() string {
	return "kata.JohnySchema"
}

func (_ *JohnySchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *JohnySchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *JohnySchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *JohnySchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *JohnySchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *JohnySchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *JohnySchema) SetString(v string)   { panic("Unsupported operation") }
func (_ *JohnySchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *JohnySchema) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Name}
	case 1:
		return &types.Int{Target: &r.Age}
	}
	panic("Unknown field index")
}

func (r *JohnySchema) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *JohnySchema) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *JohnySchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *JohnySchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *JohnySchema) Finalize()                        {}

func (_ *JohnySchema) AvroCRC64Fingerprint() []byte {
	return []byte(JohnySchemaAvroCRC64Fingerprint)
}
